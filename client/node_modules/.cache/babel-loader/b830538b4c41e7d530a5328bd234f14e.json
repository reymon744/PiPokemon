{"ast":null,"code":"import axios from \"axios\";\nexport const GET_TYPES = \"GET_TYPES\";\nexport const GET_POKEMONS = \"GET_POKEMONS\";\nexport const GET_DETAILS = \"GET_DETAILS\";\nexport const SEARCH_POKEMON_BY_NAME = \"SEARCH_POKEMON_BY_NAME\";\nexport const FILTER_BY_TYPE = \"FILTER_BY_TYPE\";\nexport const SORT = \"SORT\";\nexport const FILTER_CREATED = \"FILTER_CREATED\";\nexport const FILTER_BY_ATTACK = \"FILTER_BY_ATTACK\";\nexport const POST_POKEMON = \"POST_POKEMON\";\nexport const REMOVE_SELECTED_POKEMON = \"REMOVE_SELECTED_POKEMON\";\n\n//traemos los Pokemon del back\nexport const getPokemons = () => async dispatch => {\n  const resolve = await fetch(\"http://localhost:3001/pokemons\");\n  const data = await resolve.json();\n  return dispatch({\n    type: GET_POKEMONS,\n    payload: data\n  });\n};\n\n//traemos los Types del back\nexport const getTypes = () => async dispatch => {\n  const resolve = await fetch(\"http://localhost:3001/types\");\n  const data = await resolve.json();\n  return dispatch({\n    type: GET_TYPES,\n    payload: data\n  });\n};\n\n//traemos los details del pokemon segun su id\nexport const getDetails = id => async dispatch => {\n  const resolve = await fetch(`http://localhost:3001/pokemons/${id}`);\n  const data = await resolve.json();\n  return dispatch({\n    type: GET_DETAILS,\n    payload: data\n  });\n};\n\n//buscamos un Pokemon segun el nombre\nexport const searchPokemonName = name => async dispatch => {\n  try {\n    const resolve = await fetch(`http://localhost:3001/pokemons?name=${name}&exactMatch=true`);\n    const data = await resolve.json();\n    return dispatch({\n      type: SEARCH_POKEMON_BY_NAME,\n      payload: data\n    });\n  } catch {\n    return alert(\"Pokemon not found\");\n  }\n};\n\n//filtramos por Type\nexport const filterPokemonsByType = payload => ({\n  type: FILTER_BY_TYPE,\n  payload\n});\n\n//Creamos un Pokemon\nexport const postPokemon = payload => async dispatch => {\n  await axios.post(\"http://localhost:3001/pokemons\", payload);\n  return dispatch({\n    type: POST_POKEMON\n  });\n};\n\n//Ordenamos Alphabet\nexport const Sort = order => ({\n  type: SORT,\n  payload: order\n});\n\n//Filtramos por Origen\n_c = Sort;\nexport const filterCreated = payload => ({\n  type: FILTER_CREATED,\n  payload\n});\n\n//Filtramos por Ataque\nexport const filterByAttack = payload => {\n  return {\n    type: FILTER_BY_ATTACK,\n    payload\n  };\n};\n\n//Sacamos del Estado el pokemon que vimos en details\nexport const removeSelectedPokemon = () => ({\n  type: REMOVE_SELECTED_POKEMON\n});\nvar _c;\n$RefreshReg$(_c, \"Sort\");","map":{"version":3,"names":["axios","GET_TYPES","GET_POKEMONS","GET_DETAILS","SEARCH_POKEMON_BY_NAME","FILTER_BY_TYPE","SORT","FILTER_CREATED","FILTER_BY_ATTACK","POST_POKEMON","REMOVE_SELECTED_POKEMON","getPokemons","dispatch","resolve","fetch","data","json","type","payload","getTypes","getDetails","id","searchPokemonName","name","alert","filterPokemonsByType","postPokemon","post","Sort","order","filterCreated","filterByAttack","removeSelectedPokemon"],"sources":["F:/Henry/PI/PI Pokemon/PI-Pokemon-main/PI-Pokemon-main/PI-Pokemon-main reymon744/client/src/redux/actions/index.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n\r\nexport const GET_TYPES = \"GET_TYPES\";\r\nexport const GET_POKEMONS = \"GET_POKEMONS\";\r\nexport const GET_DETAILS = \"GET_DETAILS\";\r\nexport const SEARCH_POKEMON_BY_NAME = \"SEARCH_POKEMON_BY_NAME\";\r\nexport const FILTER_BY_TYPE = \"FILTER_BY_TYPE\";\r\nexport const SORT = \"SORT\";\r\nexport const FILTER_CREATED = \"FILTER_CREATED\";\r\nexport const FILTER_BY_ATTACK = \"FILTER_BY_ATTACK\";\r\nexport const POST_POKEMON = \"POST_POKEMON\"\r\nexport const REMOVE_SELECTED_POKEMON = \"REMOVE_SELECTED_POKEMON\"\r\n\r\n\r\n//traemos los Pokemon del back\r\nexport const getPokemons = () => async (dispatch) => {\r\n    const resolve = await fetch(\"http://localhost:3001/pokemons\");\r\n    const data = await resolve.json();\r\n    return dispatch({ type: GET_POKEMONS, payload: data });\r\n  };\r\n\r\n//traemos los Types del back\r\nexport const getTypes = () => async (dispatch) => {\r\n    const resolve = await fetch(\"http://localhost:3001/types\");\r\n    const data = await resolve.json();\r\n    return dispatch({ type: GET_TYPES, payload: data });\r\n  };\r\n\r\n//traemos los details del pokemon segun su id\r\nexport const getDetails = (id) => async (dispatch) => {\r\n    const resolve = await fetch(`http://localhost:3001/pokemons/${id}`);\r\n    const data = await resolve.json();\r\n    return dispatch({ type: GET_DETAILS, payload: data });\r\n  };\r\n\r\n//buscamos un Pokemon segun el nombre\r\nexport const searchPokemonName = (name) => async (dispatch) => {\r\n    try {\r\n      const resolve = await fetch(`http://localhost:3001/pokemons?name=${name}&exactMatch=true`);\r\n      const data = await resolve.json();\r\n      return dispatch({ type: SEARCH_POKEMON_BY_NAME, payload: data });\r\n    } catch {\r\n      return alert(\"Pokemon not found\");\r\n    }\r\n  };\r\n\r\n//filtramos por Type\r\nexport const filterPokemonsByType = (payload) => ({\r\n  type: FILTER_BY_TYPE,\r\n  payload,\r\n});\r\n\r\n//Creamos un Pokemon\r\nexport const postPokemon = (payload) => async (dispatch) => {  \r\n    await axios.post(\"http://localhost:3001/pokemons\", payload);\r\n    return dispatch({ type: POST_POKEMON });\r\n};\r\n\r\n//Ordenamos Alphabet\r\nexport const Sort = (order) => ({\r\n  type: SORT,\r\n  payload: order,\r\n})\r\n\r\n//Filtramos por Origen\r\nexport const filterCreated = (payload) => ({\r\n  type: FILTER_CREATED,\r\n  payload\r\n})\r\n\r\n//Filtramos por Ataque\r\nexport const filterByAttack = (payload) => {\r\n  return {\r\n    type: FILTER_BY_ATTACK,\r\n    payload\r\n  }\r\n}\r\n\r\n//Sacamos del Estado el pokemon que vimos en details\r\nexport const removeSelectedPokemon = () => ({\r\n  type: REMOVE_SELECTED_POKEMON\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}